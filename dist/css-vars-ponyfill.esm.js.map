{"version":3,"file":"css-vars-ponyfill.esm.js","sources":["../node_modules/get-css-data/dist/get-css-data.esm.js","../src/merge-deep.js","../node_modules/balanced-match/index.js","../src/parse-css.js","../src/stringify-css.js","../src/walk-css.js","../src/transform-css.js","../src/index.js"],"sourcesContent":["/*!\n * get-css-data\n * v1.1.1\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onComplete: options.onComplete || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map(function(x) {\n        return null;\n    });\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        urlQueue[urlIndex] = responseText;\n        settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    urlArray.forEach(function(url, i) {\n        var parser = document.createElement(\"a\");\n        parser.setAttribute(\"href\", url);\n        parser.href = parser.href;\n        var isCrossDomain = parser.host !== location.host;\n        var isSameProtocol = parser.protocol === location.protocol;\n        if (isCrossDomain && typeof XDomainRequest !== \"undefined\") {\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest();\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    onSuccess(xdr.responseText, i);\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout(function() {\n                    xdr.send();\n                }, 0);\n            } else {\n                console.log(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol\");\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200) {\n                        onSuccess(xhr.responseText, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    });\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object} [options={}] - The options object\n * @param {string} options.include - CSS selector matching <link> and <style>\n * nodes to include\n * @param {string} options.exclude - CSS selector matching <link> and <style>\n * nodes to exclude\n * @param {object} options.filter - Regular expression used to filter node CSS\n * data. Each block of CSS data is tested against the filter, and only matching\n * data is included.\n * @param {function} options.onComplete - Callback after all nodes have been\n * processed. Passes 1) concatenated CSS text, 2) an array of CSS text in DOM\n * order, and 3) an array of nodes in DOM order as arguments.\n * @param {function} options.onError - Callback on each error. Passes 1) the XHR\n * object for inspection, 2) soure node reference, and 3) the source URL that\n * failed (either a <link> href or an @import) as arguments\n * @param {function} options.onSuccess - Callback on each CSS node read. Passes\n * 1) CSS text, 2) source node reference, and 3) the source URL (either a <link>\n *    href or an import) as arguments.\n * @example\n *\n *   getCssData({\n *     include: 'style,link[rel=\"stylesheet\"]', // default\n *     exclude: '[href=\"skip.css\"]',\n *     filter : /red/,\n *     onComplete(cssText, cssArray) {\n *       // ...\n *     },\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        onComplete: options.onComplete || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, document.querySelectorAll(settings.include)).filter(function(node) {\n        return !matchesSelector(node, settings.exclude);\n    });\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map(function(x) {\n        return null;\n    });\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleError(xhr, node, url, cssIndex) {\n        var cssText = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n        cssArray[cssIndex] = cssText;\n        settings.onError(xhr, node, url);\n        handleComplete();\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl, importUrl) {\n        if (!settings.filter || settings.filter.test(cssText)) {\n            var returnVal = settings.onSuccess(cssText, node, importUrl || sourceUrl);\n            cssText = returnVal === false ? \"\" : returnVal || cssText;\n            var importRules = cssText.replace(regex.cssComments, \"\").match(regex.cssImports);\n            if (importRules) {\n                var importUrls = importRules.map(function(decl) {\n                    return decl.replace(regex.cssImports, \"$1\");\n                });\n                importUrls = importUrls.map(function(url) {\n                    return getFullUrl(url, sourceUrl);\n                });\n                getUrls(importUrls, {\n                    onError: function onError(xhr, url, urlIndex) {\n                        handleError(xhr, node, url, cssIndex, cssText);\n                    },\n                    onSuccess: function onSuccess(importText, url, urlIndex) {\n                        var importDecl = importRules[urlIndex];\n                        var importUrl = importUrls[urlIndex];\n                        var newCssText = cssText.replace(importDecl, importText);\n                        handleSuccess(newCssText, cssIndex, node, url, importUrl);\n                    }\n                });\n            } else {\n                cssArray[cssIndex] = cssText;\n                handleComplete();\n            }\n        } else {\n            cssArray[cssIndex] = \"\";\n            handleComplete();\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach(function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName === \"LINK\" && linkHref && linkRel && linkRel.toLowerCase() === \"stylesheet\";\n            var isStyle = node.nodeName === \"STYLE\";\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: \"text/css\",\n                    onError: function onError(xhr, url, urlIndex) {\n                        handleError(xhr, node, url, i);\n                    },\n                    onSuccess: function onSuccess(cssText, url, urlIndex) {\n                        var sourceUrl = getFullUrl(linkHref, location.href);\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    }\n                });\n            } else if (isStyle) {\n                handleSuccess(node.textContent, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        });\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport default getCssData;\n//# sourceMappingURL=get-css-data.esm.js.map\n","// Functions\n// =============================================================================\n/**\n * Performs a deep merge of objects and returns new object. Does not modify\n * objects (immutable) and merges arrays via concatenation.\n *\n * @param {...object} objects - Objects to merge\n * @returns {object} New object with merged key/values\n */\nfunction mergeDeep(...objects) {\n    const isObject = obj => obj instanceof Object && obj.constructor === Object;\n\n    return objects.reduce((prev, obj) => {\n        Object.keys(obj).forEach(key => {\n            const pVal = prev[key];\n            const oVal = obj[key];\n\n            // if (Array.isArray(pVal) && Array.isArray(oVal)) {\n            //     prev[key] = pVal.concat(...oVal);\n            // }\n            if (isObject(pVal) && isObject(oVal)) {\n                prev[key] = mergeDeep(pVal, oVal);\n            }\n            else {\n                prev[key] = oVal;\n            }\n        });\n\n        return prev;\n    }, {});\n}\n\n\n// Export\n// =============================================================================\nexport default mergeDeep;\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string} css The CSS stringt to be converted to an AST\n * @returns {object}\n */\nfunction cssParse(css) {\n    const errors = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n    function open() {\n        return match(/^{\\s*/);\n    }\n    function close() {\n        return match(/^}/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') { return; }\n\n        let i = 2;\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) { i++; }\n\n        // FIXED\n        if (!css[i]) { return error('end of comment is missing'); }\n\n        const str = css.slice(2, i);\n        css = css.slice(i + 2);\n\n        return { type: 'comment', comment: str };\n    }\n    function comments() {\n        const cmnts = [];\n\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n        return cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m)\n        { return m[0]\n            .trim() // remove all comments from selectors\n            .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n            .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                return m.replace(/,/g, '\\u200C');\n            })\n            .split(/\\s*(?![^(]*\\)),\\s*/)\n            .map(function(s) {\n                return s.replace(/\\u200C/g, ',');\n            }); }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\n        let prop = match(/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n        if (!prop) { return; }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) { return error('property missing \\':\\''); }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n\n        const ret = { type: 'declaration', property: prop.replace(comment_regexp, ''), value: val ? val[0].replace(comment_regexp, '').trim() : '' };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n    function declarations() {\n        if (!open()) { return error('missing \\'{\\''); }\n\n        let d,\n            decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) { return error('missing \\'}\\''); }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) { return { type: 'keyframe', values: vals, declarations: declarations() }; }\n    }\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) { return; }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n        if (!m) { return error('@keyframes missing name'); } // identifier\n\n        const name = m[1];\n\n        if (!open()) { return error('@keyframes missing \\'{\\''); }\n\n        let frame,\n            frames = comments();\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) { return error('@keyframes missing \\'}\\''); }\n\n        return { type: 'keyframes', name: name, vendor: vendor, keyframes: frames };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media *([^{]+)/);\n        if (m) { return { type: 'media', media: m[1].trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        // FIXED\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n        if (css[0] === '@') { return at_keyframes() || at_supports() || at_host() || at_media() || at_custom_m() || at_page() || at_document() || at_fontface() || at_x(); }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        const sel = selector() || [];\n        if (!sel.length) { error('selector missing'); }\n\n        const decls = declarations();\n\n        return { type: 'rule', selectors: sel, declarations: decls };\n    }\n    function rules(core) {\n        if (!core && !open()) { return error('missing \\'{\\''); }\n\n        let node,\n            rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            rules.push(node);\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) { return error('missing \\'}\\''); }\n\n        return rules;\n    }\n\n    return { type: 'stylesheet', stylesheet: { rules: rules(true), errors: errors } };\n}\n\n\n// Exports\n// =============================================================================\nexport default cssParse;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            return '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport mergeDeep    from './merge-deep';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst VAR_PROP_IDENTIFIER = '--';\nconst VAR_FUNC_IDENTIFIER = 'var';\nconst reVarProp = /^--/;\nconst reVarVal  = /^var(.*)/;\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssText CSS containing variable definitions and functions\n * @param {object}   [options] Options object\n * @param {boolean}  [options.onlyVars=true] Remove declarations that do not\n *                   contain a CSS variable from the return value. Note that\n *                   @font-face and @keyframe rules require all declarations to\n *                   be returned if a CSS variable is used.\n * @param {boolean}  [options.preserve=true] Preserve CSS variable definitions\n *                   and functions in the return value, allowing \"live\" variable\n *                   updates via JavaScript to continue working in browsers with\n *                   native CSS variable support.\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformVars(cssText, options = {}) {\n    const defaults = {\n        onlyVars : true,\n        preserve : true,\n        variables: {},\n        onWarning() {}\n    };\n    const map      = {};\n    const settings = mergeDeep(defaults, options);\n\n    // Convert cssText to AST (this could throw errors)\n    const cssTree = parseCss(cssText);\n\n    // Remove non-vars\n    if (settings.onlyVars) {\n        cssTree.stylesheet.rules = filterVars(cssTree.stylesheet.rules);\n    }\n\n    // Define variables\n    cssTree.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule') {\n            return;\n        }\n\n        // only variables declared for `:root` are supported\n        if (rule.selectors.length !== 1 || rule.selectors[0] !== ':root') {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                map[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n\n        // optionally remove `--*` properties from the rule\n        if (!settings.preserve) {\n            for (let i = varNameIndices.length - 1; i >= 0; i--) {\n                rule.declarations.splice(varNameIndices[i], 1);\n            }\n        }\n    });\n\n    // Handle variables defined in settings.variables\n    if (Object.keys(settings.variables).length) {\n        const newRule = {\n            declarations: [],\n            selectors   : [':root'],\n            type        : 'rule'\n        };\n\n        Object.keys(settings.variables).forEach(function(key) {\n            // Normalize variables by ensuring all start with leading '--'\n            const varName  = `--${key.replace(/^-+/, '')}`;\n            const varValue = settings.variables[key];\n\n            // Update internal map value with settings.variables value\n            map[varName] = varValue;\n\n            // Add new declaration to newRule\n            newRule.declarations.push({\n                type    : 'declaration',\n                property: varName,\n                value   : varValue\n            });\n        });\n\n        // Append new :root ruleset\n        if (settings.preserve) {\n            cssTree.stylesheet.rules.push(newRule);\n        }\n    }\n\n    // Resolve variables\n    walkCss(cssTree.stylesheet, function(declarations, node) {\n        let decl;\n        let resolvedValue;\n        let value;\n\n        for (let i = 0; i < declarations.length; i++) {\n            decl = declarations[i];\n            value = decl.value;\n\n            // skip comments\n            if (decl.type !== 'declaration') {\n                continue;\n            }\n\n            // skip values that don't contain variable functions\n            if (!value || value.indexOf(VAR_FUNC_IDENTIFIER + '(') === -1) {\n                continue;\n            }\n\n            resolvedValue = resolveValue(value, map, settings);\n\n            if (resolvedValue !== 'undefined') {\n                if (!settings.preserve) {\n                    decl.value = resolvedValue;\n                }\n                else {\n                    declarations.splice(i, 0, {\n                        type    : decl.type,\n                        property: decl.property,\n                        value   : resolvedValue\n                    });\n\n                    // skip ahead of preserved declaration\n                    i++;\n                }\n            }\n        }\n    });\n\n    // Return CSS string\n    return stringifyCss(cssTree);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Filters rules recursively, retaining only declarations that contain either a\n * CSS variable definition (property) or function (value). Maintains all\n * declarations for @font-face and @keyframes rules that contain a CSS\n * definition or function.\n *\n * @param {array} rules\n * @returns {array}\n */\nfunction filterVars(rules) {\n    return rules.filter(rule => {\n        // Rule, @font-face, @host, @page\n        if (rule.declarations) {\n            // @font-face rules require all declarations to be retained if any\n            // declaration contains a CSS variable definition or value.\n            // For other rules, any declaration that does not contain a CSS\n            // variable can be removed.\n            let declArray = rule.type === 'font-face' ? [] : rule.declarations;\n\n            declArray = rule.declarations.filter(d => reVarProp.test(d.property) || reVarVal.test(d.value));\n\n            return Boolean(declArray.length);\n        }\n        // @keyframes\n        else if (rule.keyframes) {\n            // @keyframe rules require all declarations to be retained if any\n            // declaration contains a CSS variable definition or value.\n            return Boolean(rule.keyframes.filter(k =>\n                Boolean(k.declarations.filter(d => reVarProp.test(d.property) || reVarVal.test(d.value)).length)\n            ).length);\n        }\n        // @document, @media, @supports\n        else if (rule.rules) {\n            rule.rules = filterVars(rule.rules).filter(r => r.declarations.length);\n\n            return Boolean(rule.rules.length);\n        }\n\n        return true;\n    });\n}\n\n/**\n * Resolve CSS variables in a value\n *\n * The second argument to a CSS variable function, if provided, is a fallback\n * value, which is used as the substitution value when the referenced variable\n * is invalid.\n *\n * var(name[, fallback])\n *\n * @param {string} value A property value containing a CSS variable function\n * @param {object} map A map of variable names and values\n * @param {object} settings Settings object passed from transformVars()\n * @return {string} A new value with CSS variables substituted or using fallback\n */\nfunction resolveValue(value, map, settings) {\n    // matches `name[, fallback]`, captures 'name' and 'fallback'\n    const RE_VAR = /([\\w-]+)(?:\\s*,\\s*)?(.*)?/;\n    const balancedParens = balanced('(', ')', value);\n    const varStartIndex  = value.indexOf('var(');\n    const varRef         = balanced('(', ')', value.substring(varStartIndex)).body;\n    const warningIntro   = 'CSS transform warning:';\n\n    /* istanbul ignore next */\n    if (!balancedParens) {\n        settings.onWarning(`${warningIntro} missing closing \")\" in the value \"${value}\"`);\n    }\n\n    /* istanbul ignore next */\n    if (varRef === '') {\n        settings.onWarning(`${warningIntro} var() must contain a non-whitespace string`);\n    }\n\n    const varFunc = VAR_FUNC_IDENTIFIER + '(' + varRef + ')';\n\n    const varResult = varRef.replace(RE_VAR, function(_, name, fallback) {\n        const replacement = map[name];\n\n        if (!replacement && !fallback) {\n            settings.onWarning(`${warningIntro} variable \"${name}\" is undefined`);\n        }\n\n        if (!replacement && fallback) {\n            return fallback;\n        }\n\n        return replacement;\n    });\n\n    // resolve the variable\n    value = value.split(varFunc).join(varResult);\n\n    // recursively resolve any remaining variables in the value\n    if (value.indexOf(VAR_FUNC_IDENTIFIER) !== -1) {\n        value = resolveValue(value, map, settings);\n    }\n\n    return value;\n}\n\n\n// Exports\n// =============================================================================\nexport default transformVars;\n","// Dependencies\n// =============================================================================\nimport getCssData          from 'get-css-data';\nimport mergeDeep           from './merge-deep';\nimport transformCss        from './transform-css';\nimport { name as pkgName } from '../package.json';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    // Sources\n    include   : 'style,link[rel=stylesheet]',\n    exclude   : '',\n    // Options\n    onlyLegacy: true,  // cssVars\n    onlyVars  : true,  // cssVars, transformCss\n    preserve  : true,  // transformCss\n    silent    : false, // cssVars\n    updateDOM : true,  // cssVars\n    variables : {},    // transformCss\n    // Callbacks\n    onSuccess() {},     // cssVars\n    onError() {},       // cssVars\n    onWarning() {},     // transformCss\n    onComplete() {}     // cssVars\n};\n// Regex: CSS variable :root declarations and var() function values\nconst reCssVars = /(?:(?::root\\s*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/;\n\n\n// Functions\n// =============================================================================\n/**\n * Description\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link> and <style> nodes to include\n * @param {string}   [options.exclude=\"\"] CSS selector matching <link> and\n *                   <style> nodes to exclude\n * @param {boolean}  [options.onlyLegacy=true] Only process CSS variables in\n *                   browsers that lack native support\n * @param {boolean}  [options.onlyVars=true] Remove declarations that do not\n *                   contain a CSS variable from the return value. Note that\n *                   font-face and keyframe rules require all declarations to be\n *                   returned if a CSS variable is used.\n * @param {boolean}  [options.preserve=true] Preserve CSS variable definitions\n *                   and functions in the return value, allowing \"live\" variable\n *                   updates via JavaScript to continue working in browsers with\n *                   native CSS variable support.\n * @param {boolean}  [options.silent=false] Prevent console warnign and error\n *                   messages\n * @param {boolean}  [options.updateDOM=true] Append <style> node containing\n *                   updated CSS to DOM\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onSuccess] Callback after all stylesheets have\n *                   been processed succesfully. Passes 1) a CSS string with CSS\n *                   variable values resolved as an argument. Modifying the CSS\n *                   appended when 'updateDOM' is 'true' can be done by\n *                   returning a string value from this funtion (or 'false' to\n *                   skip).\n * @param {function} [options.onError] Callback on each error. Passes 1) an\n *                   error message, and 2) source node reference as arguments.\n * @param {function} [options.onWarning] Callback on each warning. Passes 1) a\n *                   warning message as an argument.\n * @param {function} [options.onComplete] Callback after all stylesheets have\n *                   been processed succesfully and <style> node containing\n *                   updated CSS has been appended to the DOM (based on\n *                   'updateDOM' setting. Passes 1) a CSS string with CSS\n *                   variable values resolved, and 2) a reference to the\n *                   appended <style> node.\n *\n * @example\n *\n *   cssVars({\n *     include   : 'style,link[rel=\"stylesheet\"]', // default\n *     exclude   : '',\n *     onlyLegacy: true, // default\n *     onlyVars  : true, // default\n *     preserve  : true, // default\n *     silent    : false, // default\n *     updateDOM : true, // default\n *     variables : {\n *       // ...\n *     },\n *     onError(message, node) {\n *       // ...\n *     },\n *     onWarning(message) {\n *       // ...\n *     },\n *     onSuccess(cssText) {\n *       // ...\n *     },\n *     onComplete(cssText, styleNode) {\n *       // ...\n *     }\n *   });\n */\nfunction cssVars(options = {}) {\n    const settings = mergeDeep(defaults, options);\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.error(`${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.warn(message);\n        }\n\n        settings.onWarning(message);\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        const hasNativeSupport = window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\n        // Lacks native support or onlyLegacy 'false'\n        if (!hasNativeSupport || !settings.onlyLegacy) {\n            const styleNodeId = pkgName;\n\n            getCssData({\n                include: settings.include,\n                // Always exclude styleNodeId element, which is the generated\n                // <style> node containing previously transformed CSS.\n                exclude: `#${styleNodeId}` + (settings.exclude ? `,${settings.exclude}` : ''),\n                // This filter does a test on each block of CSS. An additional\n                // filter is used in the parser to remove individual\n                // declarations.\n                filter : settings.onlyVars ? reCssVars : null,\n                onComplete(cssText, cssArray, nodeArray) {\n                    let styleNode = null;\n\n                    try {\n                        cssText = transformCss(cssText, {\n                            onlyVars : settings.onlyVars,\n                            preserve : settings.preserve,\n                            variables: settings.variables,\n                            onWarning: handleWarning\n                        });\n\n                        // Success if an error was not been throw during\n                        // transformation. Store the onSuccess return value,\n                        // which allows modifying cssText before passing to\n                        // onComplete and/or appending to new <style> node.\n                        const returnVal = settings.onSuccess(cssText);\n\n                        // Set cssText to return value (if provided)\n                        cssText = returnVal === false ? '' : returnVal || cssText;\n\n                        if (settings.updateDOM) {\n                            styleNode = document.querySelector(`#${styleNodeId}`) || document.createElement('style');\n                            styleNode.setAttribute('id', styleNodeId);\n\n                            if (styleNode.textContent !== cssText) {\n                                styleNode.textContent = cssText;\n                            }\n\n                            // Append <style> element to either the <head> or\n                            // <body> based on the position of last stylesheet\n                            // node.\n                            const styleTargetNode = document.querySelector(`body link[rel=stylesheet], body style:not(#${styleNodeId})`) ? document.body : document.head;\n                            const isNewTarget     = styleNode.parentNode !== styleTargetNode;\n                            const isLastStyleElm  = matchesSelector(styleNode, 'style:last-of-type');\n\n                            if (isNewTarget || !isLastStyleElm) {\n                                styleTargetNode.appendChild(styleNode);\n                            }\n                        }\n                    }\n                    catch(err) {\n                        let errorThrown = false;\n\n                        // Iterate cssArray to detect CSS text and node(s)\n                        // responsibile for error.\n                        cssArray.forEach((cssText, i) => {\n                            try {\n                                cssText = transformCss(cssText, settings);\n                            }\n                            catch(err) {\n                                const errorNode = nodeArray[i - 0];\n\n                                errorThrown = true;\n                                handleError(err.message, errorNode);\n                            }\n                        });\n\n                        // In the event the error thrown was not due to\n                        // transformCss, handle the original error.\n                        /* istanbul ignore next */\n                        if (!errorThrown) {\n                            handleError(err.message || err);\n                        }\n                    }\n\n                    settings.onComplete(cssText, styleNode);\n                },\n                onError(xhr, node, url) {\n                    const errorMsg = `CSS XHR error: \"${xhr.responseURL}\" ${xhr.status}` + (xhr.statusText ? ` (${xhr.statusText})` : '');\n\n                    handleError(errorMsg, node, xhr, url);\n                }\n            });\n        }\n        // Has native support\n        else if (hasNativeSupport && settings.updateDOM) {\n            // Set variables using native methods\n            Object.keys(settings.variables).forEach(key => {\n                // Normalize variables by ensuring all start with leading '--'\n                const varName  = `--${key.replace(/^-+/, '')}`;\n                const varValue = settings.variables[key];\n\n                document.documentElement.style.setProperty(varName, varValue);\n            });\n        }\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Ponyfill for native Element.matches method\n *\n * @param   {object} elm - The element to test\n * @param   {string} selector - The CSS selector to test against\n * @returns {boolean}\n */\nfunction matchesSelector(elm, selector) {\n    /* istanbul ignore next */\n    const matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n\n    return matches.call(elm, selector);\n}\n\n\n// Export\n// =============================================================================\nexport default cssVars;\n"],"names":["getUrls","urls","options","arguments","length","undefined","settings","mimeType","onComplete","Function","prototype","onError","onSuccess","urlArray","Array","isArray","urlQueue","apply","map","x","xhr","urlIndex","responseText","indexOf","forEach","url","i","parser","document","createElement","setAttribute","href","isCrossDomain","host","location","isSameProtocol","protocol","XDomainRequest","xdr","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","log","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","cssComments","cssImports","include","exclude","filter","sourceNodes","querySelectorAll","node","matchesSelector","cssArray","handleComplete","isComplete","cssText","join","handleError","cssIndex","handleSuccess","sourceUrl","importUrl","test","returnVal","importRules","replace","match","importUrls","decl","getFullUrl","importText","importDecl","newCssText","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","mergeDeep","isObject","obj","Object","constructor","objects","reduce","prev","keys","pVal","key","oVal","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","post","reg","m","begs","beg","left","right","result","ai","bi","push","pop","cssParse","css","errors","error","msg","Error","re","exec","whitespace","close","comment","type","comments","cmnts","c","trim","split","s","declaration","comment_regexp","prop","val","ret","property","value","declarations","decls","concat","keyframe","vals","values","at_keyframes","vendor","name","frame","frames","keyframes","at_page","sel","selectors","at_fontface","at_supports","supports","rules","at_host","at_media","media","at_custom_m","at_document","at_x","at_rule","rule","core","stylesheet","stringifyCss","tree","delim","cb","renderMethods","visit","nodes","buf","n","txt","walkCss","fn","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","reVarProp","reVarVal","transformVars","defaults","cssTree","parseCss","onlyVars","filterVars","varNameIndices","preserve","splice","variables","newRule","varName","varValue","resolvedValue","resolveValue","declArray","Boolean","k","RE_VAR","balancedParens","varStartIndex","varRef","substring","warningIntro","onWarning","varFunc","varResult","_","fallback","replacement","reCssVars","cssVars","message","sourceNode","silent","handleWarning","warn","hasNativeSupport","window","CSS","onlyLegacy","styleNodeId","pkgName","nodeArray","styleNode","transformCss","updateDOM","querySelector","styleTargetNode","isNewTarget","parentNode","isLastStyleElm","errorThrown","errorNode","errorMsg","responseURL","statusText","documentElement","style","setProperty","addEventListener","init","evt","removeEventListener"],"mappings":"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"}