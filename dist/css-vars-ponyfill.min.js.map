{"version":3,"file":"css-vars-ponyfill.min.js","sources":["../node_modules/get-css-data/dist/get-css-data.esm.js","../src/merge-deep.js","../node_modules/balanced-match/index.js","../src/parse-css.js","../src/transform-css.js","../src/walk-css.js","../src/stringify-css.js","../src/index.js"],"sourcesContent":["/*!\n * get-css-data\n * v1.1.1\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onComplete: options.onComplete || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map(function(x) {\n        return null;\n    });\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        urlQueue[urlIndex] = responseText;\n        settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    urlArray.forEach(function(url, i) {\n        var parser = document.createElement(\"a\");\n        parser.setAttribute(\"href\", url);\n        parser.href = parser.href;\n        var isCrossDomain = parser.host !== location.host;\n        var isSameProtocol = parser.protocol === location.protocol;\n        if (isCrossDomain && typeof XDomainRequest !== \"undefined\") {\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest();\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    onSuccess(xdr.responseText, i);\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout(function() {\n                    xdr.send();\n                }, 0);\n            } else {\n                console.log(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol\");\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200) {\n                        onSuccess(xhr.responseText, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    });\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object} [options={}] - The options object\n * @param {string} options.include - CSS selector matching <link> and <style>\n * nodes to include\n * @param {string} options.exclude - CSS selector matching <link> and <style>\n * nodes to exclude\n * @param {object} options.filter - Regular expression used to filter node CSS\n * data. Each block of CSS data is tested against the filter, and only matching\n * data is included.\n * @param {function} options.onComplete - Callback after all nodes have been\n * processed. Passes 1) concatenated CSS text, 2) an array of CSS text in DOM\n * order, and 3) an array of nodes in DOM order as arguments.\n * @param {function} options.onError - Callback on each error. Passes 1) the XHR\n * object for inspection, 2) soure node reference, and 3) the source URL that\n * failed (either a <link> href or an @import) as arguments\n * @param {function} options.onSuccess - Callback on each CSS node read. Passes\n * 1) CSS text, 2) source node reference, and 3) the source URL (either a <link>\n *    href or an import) as arguments.\n * @example\n *\n *   getCssData({\n *     include: 'style,link[rel=\"stylesheet\"]', // default\n *     exclude: '[href=\"skip.css\"]',\n *     filter : /red/,\n *     onComplete(cssText, cssArray) {\n *       // ...\n *     },\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        onComplete: options.onComplete || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, document.querySelectorAll(settings.include)).filter(function(node) {\n        return !matchesSelector(node, settings.exclude);\n    });\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map(function(x) {\n        return null;\n    });\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleError(xhr, node, url, cssIndex) {\n        var cssText = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n        cssArray[cssIndex] = cssText;\n        settings.onError(xhr, node, url);\n        handleComplete();\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl, importUrl) {\n        if (!settings.filter || settings.filter.test(cssText)) {\n            var returnVal = settings.onSuccess(cssText, node, importUrl || sourceUrl);\n            cssText = returnVal === false ? \"\" : returnVal || cssText;\n            var importRules = cssText.replace(regex.cssComments, \"\").match(regex.cssImports);\n            if (importRules) {\n                var importUrls = importRules.map(function(decl) {\n                    return decl.replace(regex.cssImports, \"$1\");\n                });\n                importUrls = importUrls.map(function(url) {\n                    return getFullUrl(url, sourceUrl);\n                });\n                getUrls(importUrls, {\n                    onError: function onError(xhr, url, urlIndex) {\n                        handleError(xhr, node, url, cssIndex, cssText);\n                    },\n                    onSuccess: function onSuccess(importText, url, urlIndex) {\n                        var importDecl = importRules[urlIndex];\n                        var importUrl = importUrls[urlIndex];\n                        var newCssText = cssText.replace(importDecl, importText);\n                        handleSuccess(newCssText, cssIndex, node, url, importUrl);\n                    }\n                });\n            } else {\n                cssArray[cssIndex] = cssText;\n                handleComplete();\n            }\n        } else {\n            cssArray[cssIndex] = \"\";\n            handleComplete();\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach(function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName === \"LINK\" && linkHref && linkRel && linkRel.toLowerCase() === \"stylesheet\";\n            var isStyle = node.nodeName === \"STYLE\";\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: \"text/css\",\n                    onError: function onError(xhr, url, urlIndex) {\n                        handleError(xhr, node, url, i);\n                    },\n                    onSuccess: function onSuccess(cssText, url, urlIndex) {\n                        var sourceUrl = getFullUrl(linkHref, location.href);\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    }\n                });\n            } else if (isStyle) {\n                handleSuccess(node.textContent, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        });\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport default getCssData;\n//# sourceMappingURL=get-css-data.esm.js.map\n","// Functions\n// =============================================================================\n/**\n * Performs a deep merge of objects and returns new object. Does not modify\n * objects (immutable) and merges arrays via concatenation.\n *\n * @param {...object} objects - Objects to merge\n * @returns {object} New object with merged key/values\n */\nfunction mergeDeep(...objects) {\n    const isObject = obj => obj instanceof Object && obj.constructor === Object;\n\n    return objects.reduce((prev, obj) => {\n        Object.keys(obj).forEach(key => {\n            const pVal = prev[key];\n            const oVal = obj[key];\n\n            // if (Array.isArray(pVal) && Array.isArray(oVal)) {\n            //     prev[key] = pVal.concat(...oVal);\n            // }\n            if (isObject(pVal) && isObject(oVal)) {\n                prev[key] = mergeDeep(pVal, oVal);\n            }\n            else {\n                prev[key] = oVal;\n            }\n        });\n\n        return prev;\n    }, {});\n}\n\n\n// Export\n// =============================================================================\nexport default mergeDeep;\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string} css The CSS stringt to be converted to an AST\n * @returns {object}\n */\nfunction cssParse(css) {\n    const errors = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n    function open() {\n        return match(/^{\\s*/);\n    }\n    function close() {\n        return match(/^}/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') { return; }\n\n        let i = 2;\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) { i++; }\n\n        // FIXED\n        if (!css[i]) { return error('end of comment is missing'); }\n\n        const str = css.slice(2, i);\n        css = css.slice(i + 2);\n\n        return { type: 'comment', comment: str };\n    }\n    function comments() {\n        const cmnts = [];\n\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n        return cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m)\n        { return m[0]\n            .trim() // remove all comments from selectors\n            .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n            .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                return m.replace(/,/g, '\\u200C');\n            })\n            .split(/\\s*(?![^(]*\\)),\\s*/)\n            .map(function(s) {\n                return s.replace(/\\u200C/g, ',');\n            }); }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\n        let prop = match(/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n        if (!prop) { return; }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) { return error('property missing \\':\\''); }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n\n        const ret = { type: 'declaration', property: prop.replace(comment_regexp, ''), value: val ? val[0].replace(comment_regexp, '').trim() : '' };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n    function declarations() {\n        if (!open()) { return error('missing \\'{\\''); }\n\n        let d,\n            decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) { return error('missing \\'}\\''); }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) { return { type: 'keyframe', values: vals, declarations: declarations() }; }\n    }\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) { return; }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n        if (!m) { return error('@keyframes missing name'); } // identifier\n\n        const name = m[1];\n\n        if (!open()) { return error('@keyframes missing \\'{\\''); }\n\n        let frame,\n            frames = comments();\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) { return error('@keyframes missing \\'}\\''); }\n\n        return { type: 'keyframes', name: name, vendor: vendor, keyframes: frames };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media *([^{]+)/);\n        if (m) { return { type: 'media', media: m[1].trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        // FIXED\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n        if (css[0] === '@') { return at_keyframes() || at_supports() || at_host() || at_media() || at_custom_m() || at_page() || at_document() || at_fontface() || at_x(); }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        const sel = selector() || [];\n        if (!sel.length) { error('selector missing'); }\n\n        const decls = declarations();\n\n        return { type: 'rule', selectors: sel, declarations: decls };\n    }\n    function rules(core) {\n        if (!core && !open()) { return error('missing \\'{\\''); }\n\n        let node,\n            rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            rules.push(node);\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) { return error('missing \\'}\\''); }\n\n        return rules;\n    }\n\n    return { type: 'stylesheet', stylesheet: { rules: rules(true), errors: errors } };\n}\n\n\n// Exports\n// =============================================================================\nexport default cssParse;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport mergeDeep    from './merge-deep';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst persistStore        = {};\nconst VAR_PROP_IDENTIFIER = '--';\nconst VAR_FUNC_IDENTIFIER = 'var';\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssText CSS containing variable definitions and functions\n * @param {object}   [options] Options object\n * @param {boolean}  [options.onlyVars=true] Remove declarations that do not\n *                   contain a CSS variable from the return value. Note that\n *                   @font-face and @keyframe rules require all declarations to\n *                   be returned if a CSS variable is used.\n * @param {boolean}  [options.persist=false] Persists options.variables,\n *                   allowing variables set in previous calls to be applied in\n *                   subsequent calls.\n * @param {boolean}  [options.preserve=true] Preserve CSS variable definitions\n *                   and functions in the return value, allowing \"live\" variable\n *                   updates via JavaScript to continue working in browsers with\n *                   native CSS variable support.\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformVars(cssText, options = {}) {\n    const defaults = {\n        onlyVars : true,\n        persist  : false,\n        preserve : true,\n        variables: {},\n        onWarning() {}\n    };\n    const map       = {};\n    const settings  = mergeDeep(defaults, options);\n    const varSource = settings.persist ? persistStore : settings.variables;\n\n    // Convert cssText to AST (this could throw errors)\n    const cssTree = parseCss(cssText);\n\n    // Remove non-vars\n    if (settings.onlyVars) {\n        cssTree.stylesheet.rules = filterVars(cssTree.stylesheet.rules);\n    }\n\n    // Define variables\n    cssTree.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule') {\n            return;\n        }\n\n        // only variables declared for `:root` are supported\n        if (rule.selectors.length !== 1 || rule.selectors[0] !== ':root') {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                map[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n\n        // optionally remove `--*` properties from the rule\n        if (!settings.preserve) {\n            for (let i = varNameIndices.length - 1; i >= 0; i--) {\n                rule.declarations.splice(varNameIndices[i], 1);\n            }\n        }\n    });\n\n    // Handle variables defined in settings.variables\n    Object.keys(settings.variables).forEach(key => {\n        // Convert all property names to leading '--' style\n        const prop  = `--${key.replace(/^-+/, '')}`;\n        const value = settings.variables[key];\n\n        // Update settings.variables\n        if (key !== prop) {\n            settings.variables[prop] = value;\n            delete settings.variables[key];\n        }\n\n        // Store variables so they can be reapplied on subsequent call. For\n        // example, if '--myvar' is set on the first call it should continue to\n        // be set on each call thereafter (otherwise each call removes the\n        // previously set variables).\n        if (settings.persist) {\n            persistStore[prop] = value;\n        }\n    });\n\n    if (Object.keys(varSource).length) {\n        const newRule = {\n            declarations: [],\n            selectors   : [':root'],\n            type        : 'rule'\n        };\n\n        Object.keys(varSource).forEach(function(key) {\n            // Update internal map value with varSource value\n            map[key] = varSource[key];\n\n            // Add new declaration to newRule\n            newRule.declarations.push({\n                type    : 'declaration',\n                property: key,\n                value   : varSource[key]\n            });\n\n            // Add to persistent storage\n            if (settings.persist) {\n                persistStore[key] = varSource[key];\n            }\n        });\n\n        // Append new :root ruleset\n        if (settings.preserve) {\n            cssTree.stylesheet.rules.push(newRule);\n        }\n    }\n\n    // Resolve variables\n    walkCss(cssTree.stylesheet, function(declarations, node) {\n        let decl;\n        let resolvedValue;\n        let value;\n\n        for (let i = 0; i < declarations.length; i++) {\n            decl = declarations[i];\n            value = decl.value;\n\n            // skip comments\n            if (decl.type !== 'declaration') {\n                continue;\n            }\n\n            // skip values that don't contain variable functions\n            if (!value || value.indexOf(VAR_FUNC_IDENTIFIER + '(') === -1) {\n                continue;\n            }\n\n            resolvedValue = resolveValue(value, map, settings);\n\n            if (resolvedValue !== 'undefined') {\n                if (!settings.preserve) {\n                    decl.value = resolvedValue;\n                }\n                else {\n                    declarations.splice(i, 0, {\n                        type    : decl.type,\n                        property: decl.property,\n                        value   : resolvedValue\n                    });\n\n                    // skip ahead of preserved declaration\n                    i++;\n                }\n            }\n        }\n    });\n\n    // Return CSS string\n    return stringifyCss(cssTree);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Filters rules recursively, retaining only declarations that contain either a\n * CSS variable definition (property) or function (value). Maintains all\n * declarations for @font-face and @keyframes rules that contain a CSS\n * definition or function.\n *\n * @param {array} rules\n * @returns {array}\n */\nfunction filterVars(rules) {\n    return rules.filter(rule => {\n        // Rule, @font-face, @host, @page\n        if (rule.declarations) {\n            // @font-face rules require all declarations to be retained if any\n            // declaration contains a CSS variable definition or value.\n            // For other rules, any declaration that does not contain a CSS\n            // variable can be removed.\n            let declArray = rule.type === 'font-face' ? [] : rule.declarations;\n\n            declArray = rule.declarations.filter(d => {\n                const hasVarProp = d.property && d.property.indexOf(VAR_PROP_IDENTIFIER) === 0;\n                const hasVarVal  = d.value && d.value.indexOf(`${VAR_FUNC_IDENTIFIER}(`) === 0;\n\n                return hasVarProp || hasVarVal;\n            });\n\n            return Boolean(declArray.length);\n        }\n        // @keyframes\n        else if (rule.keyframes) {\n            // @keyframe rules require all declarations to be retained if any\n            // declaration contains a CSS variable definition or value.\n            return Boolean(rule.keyframes.filter(k =>\n                Boolean(k.declarations.filter(d => {\n                    const hasVarProp = d.property && d.property.indexOf(VAR_PROP_IDENTIFIER) === 0;\n                    const hasVarVal  = d.value && d.value.indexOf(`${VAR_FUNC_IDENTIFIER}(`) === 0;\n\n                    return hasVarProp || hasVarVal;\n                }).length)\n            ).length);\n        }\n        // @document, @media, @supports\n        else if (rule.rules) {\n            rule.rules = filterVars(rule.rules).filter(r => r.declarations.length);\n\n            return Boolean(rule.rules.length);\n        }\n\n        return true;\n    });\n}\n\n/**\n * Resolve CSS variables in a value\n *\n * The second argument to a CSS variable function, if provided, is a fallback\n * value, which is used as the substitution value when the referenced variable\n * is invalid.\n *\n * var(name[, fallback])\n *\n * @param {string} value A property value containing a CSS variable function\n * @param {object} map A map of variable names and values\n * @param {object} settings Settings object passed from transformVars()\n * @return {string} A new value with CSS variables substituted or using fallback\n */\nfunction resolveValue(value, map, settings) {\n    // matches `name[, fallback]`, captures 'name' and 'fallback'\n    const RE_VAR = /([\\w-]+)(?:\\s*,\\s*)?(.*)?/;\n    const balancedParens = balanced('(', ')', value);\n    const varStartIndex  = value.indexOf('var(');\n    const varRef         = balanced('(', ')', value.substring(varStartIndex)).body;\n    const warningIntro   = 'CSS transform warning:';\n\n    /* istanbul ignore next */\n    if (!balancedParens) {\n        settings.onWarning(`${warningIntro} missing closing \")\" in the value \"${value}\"`);\n    }\n\n    /* istanbul ignore next */\n    if (varRef === '') {\n        settings.onWarning(`${warningIntro} var() must contain a non-whitespace string`);\n    }\n\n    const varFunc = VAR_FUNC_IDENTIFIER + '(' + varRef + ')';\n\n    const varResult = varRef.replace(RE_VAR, function(_, name, fallback) {\n        const replacement = map[name];\n\n        if (!replacement && !fallback) {\n            settings.onWarning(`${warningIntro} variable \"${name}\" is undefined`);\n        }\n\n        if (!replacement && fallback) {\n            return fallback;\n        }\n\n        return replacement;\n    });\n\n    // resolve the variable\n    value = value.split(varFunc).join(varResult);\n\n    // recursively resolve any remaining variables in the value\n    if (value.indexOf(VAR_FUNC_IDENTIFIER) !== -1) {\n        value = resolveValue(value, map, settings);\n    }\n\n    return value;\n}\n\n\n// Exports\n// =============================================================================\nexport default transformVars;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            return '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","// Dependencies\n// =============================================================================\nimport getCssData          from 'get-css-data';\nimport mergeDeep           from './merge-deep';\nimport transformCss        from './transform-css';\nimport { name as pkgName } from '../package.json';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    // Sources\n    include   : 'style,link[rel=stylesheet]',\n    exclude   : '',\n    // Options\n    onlyLegacy: true,  // cssVars\n    onlyVars  : true,  // cssVars, transformCss\n    preserve  : true,  // transformCss\n    silent    : false, // cssVars\n    updateDOM : true,  // cssVars\n    variables : {},    // transformCss\n    // Callbacks\n    onSuccess() {},     // cssVars\n    onError() {},       // cssVars\n    onWarning() {},     // transformCss\n    onComplete() {}     // cssVars\n};\n// Regex: CSS variable :root declarations and var() function values\nconst reCssVars = /(?:(?::root\\s*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/;\n\n\n// Functions\n// =============================================================================\n/**\n * Description\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude=\"\"] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.onlyVars=true] Determines if CSS rulesets and\n *                   declarations without a custom property value should be\n *                   removed from the ponyfill-generated CSS\n * @param {boolean}  [options.preserve=true] Determines if the original CSS\n *                   custom property declaration will be retained in the\n *                   ponyfill-generated CSS.\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {object}   [options.variables={}] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values.\n * @param {function} [options.onSuccess] Callback after all CSS has been\n *                   processed and legacy-compatible CSS has been generated, but\n *                   before the legacy CSS has been appended to the DOM. Allows\n *                   modifying the CSS data by returning any string value (or\n *                   false to skip) before options.onComplete is triggered.\n *                   Passes 1) a CSS string with CSS variable values resolved as\n *                   an argument.\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, and 2) a\n *                   reference to the appended <style> node.\n *\n * @example\n *\n *   cssVars({\n *     include   : 'style,link[rel=\"stylesheet\"]', // default\n *     exclude   : '',\n *     onlyLegacy: true, // default\n *     onlyVars  : true, // default\n *     preserve  : true, // default\n *     silent    : false, // default\n *     updateDOM : true, // default\n *     variables : {\n *       // ...\n *     },\n *     onError(message, node) {\n *       // ...\n *     },\n *     onWarning(message) {\n *       // ...\n *     },\n *     onSuccess(cssText) {\n *       // ...\n *     },\n *     onComplete(cssText, styleNode) {\n *       // ...\n *     }\n *   });\n */\nfunction cssVars(options = {}) {\n    const settings = mergeDeep(defaults, options);\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.error(`${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.warn(message);\n        }\n\n        settings.onWarning(message);\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        const hasNativeSupport = window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\n        // Lacks native support or onlyLegacy 'false'\n        if (!hasNativeSupport || !settings.onlyLegacy) {\n            const styleNodeId = pkgName;\n\n            getCssData({\n                include: settings.include,\n                // Always exclude styleNodeId element, which is the generated\n                // <style> node containing previously transformed CSS.\n                exclude: `#${styleNodeId}` + (settings.exclude ? `,${settings.exclude}` : ''),\n                // This filter does a test on each block of CSS. An additional\n                // filter is used in the parser to remove individual\n                // declarations.\n                filter : settings.onlyVars ? reCssVars : null,\n                onComplete(cssText, cssArray, nodeArray) {\n                    let styleNode = null;\n\n                    try {\n                        cssText = transformCss(cssText, {\n                            onlyVars : settings.onlyVars,\n                            persist  : settings.updateDOM,\n                            preserve : settings.preserve,\n                            variables: settings.variables,\n                            onWarning: handleWarning\n                        });\n\n                        // Success if an error was not been throw during\n                        // transformation. Store the onSuccess return value,\n                        // which allows modifying cssText before passing to\n                        // onComplete and/or appending to new <style> node.\n                        const returnVal = settings.onSuccess(cssText);\n\n                        // Set cssText to return value (if provided)\n                        cssText = returnVal === false ? '' : returnVal || cssText;\n\n                        if (settings.updateDOM) {\n                            styleNode = document.querySelector(`#${styleNodeId}`) || document.createElement('style');\n                            styleNode.setAttribute('id', styleNodeId);\n\n                            if (styleNode.textContent !== cssText) {\n                                styleNode.textContent = cssText;\n                            }\n\n                            // Append <style> element to either the <head> or\n                            // <body> based on the position of last stylesheet\n                            // node.\n                            const sourceNodes = document.querySelectorAll('link[rel=stylesheet],style');\n                            const styleTarget = document.querySelector(`body link[rel=stylesheet], body style:not(#${styleNodeId})`) ? document.body : document.head;\n                            const isNewTarget = styleNode.parentNode !== styleTarget;\n                            const isNotLast   = sourceNodes[sourceNodes.length -1] !== styleNode;\n\n                            if (isNewTarget || isNotLast) {\n                                styleTarget.appendChild(styleNode);\n                            }\n                        }\n                    }\n                    catch(err) {\n                        let errorThrown = false;\n\n                        // Iterate cssArray to detect CSS text and node(s)\n                        // responsibile for error.\n                        cssArray.forEach((cssText, i) => {\n                            try {\n                                cssText = transformCss(cssText, settings);\n                            }\n                            catch(err) {\n                                const errorNode = nodeArray[i - 0];\n\n                                errorThrown = true;\n                                handleError(err.message, errorNode);\n                            }\n                        });\n\n                        // In the event the error thrown was not due to\n                        // transformCss, handle the original error.\n                        /* istanbul ignore next */\n                        if (!errorThrown) {\n                            handleError(err.message || err);\n                        }\n                    }\n\n                    settings.onComplete(cssText, styleNode);\n                },\n                onError(xhr, node, url) {\n                    const errorMsg = `CSS XHR error: \"${xhr.responseURL}\" ${xhr.status}` + (xhr.statusText ? ` (${xhr.statusText})` : '');\n\n                    handleError(errorMsg, node, xhr, url);\n                }\n            });\n        }\n        // Has native support\n        else if (hasNativeSupport && settings.updateDOM) {\n            // Set variables using native methods\n            Object.keys(settings.variables).forEach(key => {\n                // Convert all property names to leading '--' style\n                const prop  = `--${key.replace(/^-+/, '')}`;\n                const value = settings.variables[key];\n\n                document.documentElement.style.setProperty(prop, value);\n            });\n        }\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n\n// Export\n// =============================================================================\nexport default cssVars;\n"],"names":["getUrls","urls","options","arguments","length","undefined","settings","mimeType","onComplete","Function","prototype","onError","onSuccess","urlArray","Array","isArray","urlQueue","apply","map","x","xhr","urlIndex","responseText","indexOf","forEach","url","i","parser","document","createElement","setAttribute","href","isCrossDomain","host","location","isSameProtocol","protocol","XDomainRequest","xdr","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","log","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getFullUrl","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","mergeDeep","isObject","obj","Object","constructor","objects","reduce","prev","keys","pVal","key","oVal","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","post","reg","m","match","begs","beg","left","right","result","ai","bi","push","pop","cssParse","css","error","msg","Error","re","exec","whitespace","close","comment","type","comments","cmnts","c","selector","trim","replace","split","s","declaration","comment_regexp","prop","val","ret","property","value","declarations","decls","concat","keyframe","vals","values","at_rule","vendor","name","frame","frames","keyframes","at_keyframes","supports","rules","at_supports","at_host","media","at_media","at_custom_m","selectors","at_page","at_document","at_fontface","at_x","core","sel","node","stylesheet","errors","persistStore","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","transformVars","cssText","varSource","persist","variables","cssTree","parseCss","onlyVars","filterVars","filter","rule","declArray","hasVarProp","hasVarVal","Boolean","k","varNameIndices","decl","preserve","splice","newRule","walkCss","fn","resolvedValue","resolveValue","tree","delim","cb","renderMethods","visit","join","nodes","buf","n","txt","stringifyCss","balancedParens","varStartIndex","varRef","substring","warningIntro","onWarning","varFunc","varResult","_","fallback","replacement","defaults","reCssVars","cssVars","handleError","message","sourceNode","silent","handleWarning","warn","hasNativeSupport","window","CSS","onlyLegacy","updateDOM","documentElement","style","setProperty","styleNodeId","pkgName","regex","cssComments","cssImports","include","exclude","sourceNodes","querySelectorAll","elm","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","cssArray","handleComplete","cssIndex","handleSuccess","sourceUrl","importUrl","test","returnVal","importRules","importUrls","importText","importDecl","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","nodeArray","styleNode","transformCss","querySelector","styleTarget","isNewTarget","parentNode","isNotLast","errorThrown","errorNode","responseURL","statusText","addEventListener","init","evt","removeEventListener"],"mappings":"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"}